Web VPython 3.2
##simple harmonic oscillator
##plan: want to graph seperation (or the equations of the two functions) over time and print the lyapunov exponent
##general equations:
## 1. x(t) = Acos(omega * t + phi)          note: this equation is the solution to the one below
## 2. second derivative of x with respect to time  + k/m (x) = 0        differential equation that we want to solve
## 3. lyapunov exponent = 1/t * lim t-> infinity (ln (seperation(t) / seperation(0)))

simple_harmonic_oscillator = graph(title = "Lyapunov Exponent of a Simple Harmonic Osicllator", xtitle = "time", ytitle = "xcor")
oscillator1 = gcurve(graph = simple_harmonic_oscillator, color = color.red, label = "Oscillator 1's X Position")
oscillator2 = gcurve(graph = simple_harmonic_oscillator, color = color.blue, label = "Oscillator 2's X Position")
separation_between_oscillators = gcurve(graph = simple_harmonic_oscillator, color = color.green, label = "Difference between X Position of Two Oscillators")

phase = graph(title = "Phase Space Diagram", xmin = -4, xmax = 4, ymin = -4, ymax = 4, xtitle = 'x position', ytitle = 'velocity in the xdirection')
phasediagrams1 = gcurve(graph = phase, color = color.red, label = "Oscillator 1")
phasediagrams2 = gcurve(graph = phase, color = color.blue, label = "Oscillator 2")
##setting up graphs


k = 200 ##spring constant
mass = 200 ##mass of object on spring
timestep = 0.01
iterations = 10000

phi1 = 0
phi2 = 0.2
##above are different phi values that signal the change in initial conditions between the two simulations

lyapunov = []

def omega():
    return sqrt(k / mass)

def harmonic_x_equation(amplitude, t, phi): ##returns the x value at that specific time point
    return amplitude * cos((omega() * t) + phi)

i = 0
while i < iterations:
    
    separation_equation = harmonic_x_equation(1, i, phi1) - harmonic_x_equation(1, i, phi2)
    ##seperation of xcors at any t
    
    lyapunovv = log(abs(-omega()*sin(omega()*i)))  ##log of absolute value of derivative
    lyapunov.append(lyapunovv) ## add to list to later sum and divide
    
    if i <= 10: ##if there are too many iterates on the graph, it just bunches up
        oscillator1.plot(i, harmonic_x_equation(1, i, phi1))
        oscillator2.plot(i, harmonic_x_equation(1, i, phi2))
        
        separation_between_oscillators.plot(i, separation_equation) 
        ##will graph the seperation between the two oscillaors


    if i > 0: ##velocity for phase space diagrams
        central_diff1 = (harmonic_x_equation(1, i+timestep, phi1) - harmonic_x_equation(1, i-timestep, phi1)) / (2 * timestep)
        phasediagrams1.plot(harmonic_x_equation(1, i, phi1), central_diff1)
        
        central_diff2 = (harmonic_x_equation(1, i+timestep, phi2) - harmonic_x_equation(1, i-timestep, phi2)) / (2 * timestep)
        phasediagrams2.plot(harmonic_x_equation(1, i, phi2), central_diff2)

    if i > (9999.99): ##calculates lyapunov exponent and prints
        lyapunov_exponent = (sum(lyapunov) / (i / timestep))
        print("The Lyapunov Exponent of a Simple Harmonic Oscillator is " + lyapunov_exponent + ".") 
        
        if (lyapunov_exponent < 0):
            print("The Lyapunov Exponent being negative is an indicator that this is a non-chaotic system.")
    i += timestep ##increment
